// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// cox_llk_cpp
double cox_llk_cpp(Rcpp::IntegerVector y, SEXP XData, Rcpp::NumericVector beta, double lambda, Rcpp::NumericVector weight);
RcppExport SEXP _ELMCox_cox_llk_cpp(SEXP ySEXP, SEXP XDataSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type XData(XDataSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_llk_cpp(y, XData, beta, lambda, weight));
    return rcpp_result_gen;
END_RCPP
}
// cox_grad_cpp
arma::colvec cox_grad_cpp(Rcpp::IntegerVector y, SEXP XData, Rcpp::NumericVector beta, double lambda, Rcpp::NumericVector weight);
RcppExport SEXP _ELMCox_cox_grad_cpp(SEXP ySEXP, SEXP XDataSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type XData(XDataSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_grad_cpp(y, XData, beta, lambda, weight));
    return rcpp_result_gen;
END_RCPP
}
// cox_dgrad_cpp
arma::mat cox_dgrad_cpp(Rcpp::IntegerVector y, SEXP XData, Rcpp::NumericVector beta, double lambda, Rcpp::NumericVector weight);
RcppExport SEXP _ELMCox_cox_dgrad_cpp(SEXP ySEXP, SEXP XDataSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type XData(XDataSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(cox_dgrad_cpp(y, XData, beta, lambda, weight));
    return rcpp_result_gen;
END_RCPP
}
// mm_mult
arma::mat mm_mult(NumericMatrix x, NumericMatrix y);
RcppExport SEXP _ELMCox_mm_mult(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(mm_mult(x, y));
    return rcpp_result_gen;
END_RCPP
}
// testDFtoNM
Rcpp::NumericMatrix testDFtoNM(DataFrame x);
RcppExport SEXP _ELMCox_testDFtoNM(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(testDFtoNM(x));
    return rcpp_result_gen;
END_RCPP
}
// scaleNM
Rcpp::List scaleNM(NumericMatrix x1);
RcppExport SEXP _ELMCox_scaleNM(SEXP x1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x1(x1SEXP);
    rcpp_result_gen = Rcpp::wrap(scaleNM(x1));
    return rcpp_result_gen;
END_RCPP
}
// kernmat
Rcpp::NumericMatrix kernmat(SEXP xtrain, SEXP kernel_type, SEXP kernel_para, SEXP xtest);
RcppExport SEXP _ELMCox_kernmat(SEXP xtrainSEXP, SEXP kernel_typeSEXP, SEXP kernel_paraSEXP, SEXP xtestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xtrain(xtrainSEXP);
    Rcpp::traits::input_parameter< SEXP >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type kernel_para(kernel_paraSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xtest(xtestSEXP);
    rcpp_result_gen = Rcpp::wrap(kernmat(xtrain, kernel_type, kernel_para, xtest));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ELMCox_cox_llk_cpp", (DL_FUNC) &_ELMCox_cox_llk_cpp, 5},
    {"_ELMCox_cox_grad_cpp", (DL_FUNC) &_ELMCox_cox_grad_cpp, 5},
    {"_ELMCox_cox_dgrad_cpp", (DL_FUNC) &_ELMCox_cox_dgrad_cpp, 5},
    {"_ELMCox_mm_mult", (DL_FUNC) &_ELMCox_mm_mult, 2},
    {"_ELMCox_testDFtoNM", (DL_FUNC) &_ELMCox_testDFtoNM, 1},
    {"_ELMCox_scaleNM", (DL_FUNC) &_ELMCox_scaleNM, 1},
    {"_ELMCox_kernmat", (DL_FUNC) &_ELMCox_kernmat, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_ELMCox(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
